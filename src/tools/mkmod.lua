#!/usr/local/bin/lua
--[[
  mkmod.lua - produce makefiles for various compilers from one *.build file.
  Copyright (c) 2007,2008 by Dmitri Arkhangelski (dmitriar@gmail.com).

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

  SYNOPSIS:    lua mkmod.lua <filename>
  If processing was sucessful, binary modules will be placed in ../../bin directory;
  *.lib or *.a files - in  ../../lib directory.
  NOTE: BUILD_ENV environment variable must be set before this script
  execution in one of three values: winddk, msvc, mingw.
--]]

-- NOTES for C programmers: 
--   1. the first element of each array has index 1.
--   2. only nil and false values are false, all other including 0 are true

opts = {
	NAME="",
	TYPE="",
	SRC="",
	RC="",
	LIBS="",
	ADLIBS="",
	DEFFILE="",
	BASEADDR="",
	NATIVEDLL="",
	UMENTRY="",
	}

src_files = {}
rc_files = {}
libs = {}
adlibs = {}

input_filename = ""
target_type, target_ext, target_name, nt4target_name = "", "", "", ""
arch = ""

ddk_cmd = "build.exe"
msvc_cmd = "nmake.exe /NOLOGO /A /f"
mingw_cmd = "mingw32-make --always-make -f Makefile.mingw"

-- common subroutines
function my_split(str, separator)
	local i = 1; local values = {}
	if str == nil then return {} end
	for v in string.gmatch(str,"[^" .. separator .. "]+") do
		values[i] = v
		i = i + 1
	end
	return values
end

function copy(src, dst)
	if os.execute("cmd.exe /C copy /Y " .. src .. " " .. dst) ~= 0 then
		assert(false,"Can't copy from " .. src .. " to " .. dst .. "!");
	end
end

-- frontend subroutines
function get_opts(path)
	for line in io.lines(path) do
		for k, v in string.gmatch(line,"(.+)=(.+)") do
			if v ~= nil then opts[k] = v end
		end
	end
	src_files = my_split(opts.SRC,";")
	rc_files = my_split(opts.RC,";")
	libs = my_split(opts.LIBS,";")
	adlibs = my_split(opts.ADLIBS,";")
end

function obsolete(src, dst)
--[[	my ($src_mtime,$dst_mtime);

	unless(-f $src){
		die("Source not found!");
		return;
	}
	unless(-f $dst){
		return 1;
	}
    $src_mtime = (stat($src))[9];
	$dst_mtime = (stat($dst))[9];
	--print "src:$src_mtime, dst:$dst_mtime\n";
 	return ($dst_mtime > $src_mtime) ? 0 : 1;
--]]
	return true
end

-- WinDDK backend
makefile_contents = [[
#
# DO NOT EDIT THIS FILE!!!  Edit .\sources if you want to add a new source
# file to this component.  This file merely indirects to the real make file
# that is shared by all the driver components of the Windows NT DDK
#

!INCLUDE $(NTMAKEENV)\makefile.def

]]
function produce_ddk_makefile()
	local _type, t, umt, e

	local f = assert(io.open(".\\makefile","w"))
	f:write(makefile_contents)
	f:close()

	f = assert(io.open(".\\sources","w"))

	e = opts.UMENTRY
	_type = opts.TYPE
	if _type ~= "driver" then
		f:write("TARGETNAME=", opts.NAME, "\n")
	else
		f:write("!IF \"\$(NT4_TARGET)\" == \"true\"\n")
		f:write("TARGETNAME=", opts.NAME, "_nt4\n")
		f:write("!ELSE\n")
		f:write("TARGETNAME=", opts.NAME, "\n")
		f:write("!ENDIF\n")
	end
	f:write("TARGETPATH=obj\n")

	if     _type == "console" then t = "PROGRAM"; umt = "console"
	elseif _type == "gui"     then t = "PROGRAM"; umt = "windows"
	elseif _type == "native"  then t = "PROGRAM"; umt = "nt"
	elseif _type == "driver"  then t = "DRIVER"
	elseif _type == "dll"     then t = "DYNLINK"; umt = "console"
	else   assert(false,"Unknown target type: " .. _type .. "!")
	end

	f:write("TARGETTYPE=", t, "\n\n")
	if _type == "dll" then
		f:write("DLLDEF=", opts.DEFFILE, "\n\n")
	end

	if _type ~= "driver" then
		f:write("USER_C_FLAGS=/DUSE_WINDDK\n\n")
	else
		f:write("!IF \"\$(NT4_TARGET)\" == \"true\"\n")
		f:write("USER_C_FLAGS=/DUSE_WINDDK /DNT4_TARGET\n")
		f:write("RCOPTIONS=/d NT4_TARGET\n")
		f:write("!ELSE\n")
		f:write("USER_C_FLAGS=/DUSE_WINDDK\n")
		f:write("!ENDIF\n\n")
	end
	if _type == "console" or _type == "gui" then
		f:write("CFLAGS=\$(CFLAGS) /MT\n\n")
	end

	f:write("SOURCES=")
	for i, v in ipairs(src_files) do f:write(v, " ") end
	for i, v in ipairs(rc_files) do f:write(v, " ") end
	f:write("\n")
	
	if _type == "console" or _type == "gui" then 
		f:write("USE_MSVCRT=1\n")
	end
	if _type == "native" then
		f:write("USE_NTDLL=1\n")
	end
	if _type == "dll" then
		if opts.NATIVEDLL == "1" then
			f:write("USE_NTDLL=1\n")
		else
			f:write("USE_MSVCRT=1\n")
		end
	end
	f:write("\n")
	
	if _type == "native" or _type == "dll" then
		f:write("# very important for nt 4.0 ")
		f:write("(without RtlUnhandledExceptionFilter function)\n")
		f:write("BUFFER_OVERFLOW_CHECKS=0\n\n")
	end

	f:write("LINKLIBS=")
	for i, v in ipairs(libs) do
		if v ~= "msvcrt" then
			f:write("\$(DDK_LIB_PATH)\\", v, ".lib ")
		end
	end
	for i, v in ipairs(adlibs) do f:write(v, ".lib ") end
	f:write("\n\n")
	
	if _type ~= "driver" then f:write("UMTYPE=", umt, "\n") end
	if _type ==  "console" or _type == "gui" then
		f:write("UMENTRY=", e, "\n")
	end
	if _type == "dll" then
		f:write("DLLBASE=", opts.BASEADDR, "\nDLLENTRY=DllMain\n")
	end
	f:close()
end

-- MS Visual Studio backend
function produce_msvc_makefile()
	local _type, s, upname
	local cl_flags, rsc_flags, link_flags

	local f = assert(io.open(".\\" .. opts.NAME .. ".mak","w"))

	--[[
	OUTDIR and INTDIR parameters are replaced with current directory
	f:write("!IF \"\$(OS)\" == \"Windows_NT\"\n")
	f:write("NULL=\n")
	f:write("!ELSE\n")
	f:write("NULL=nul\n")
	f:write("!ENDIF\n\n")
	--]]

	cl_flags = "CPP_PROJ=/nologo /W3 /O2 /D \"WIN32\" /D \"NDEBUG\" /D \"_MBCS\" "
	_type = opts.TYPE
	upname = string.upper(opts.NAME) .. "_EXPORTS"
	if _type == "console" then
		cl_flags = cl_flags .. "/D \"_CONSOLE\" "
		s = "console"
	elseif _type == "gui" then
		cl_flags = cl_flags .. "/D \"_WINDOWS\" "
		s = "windows"
	elseif _type == "dll" then
		cl_flags = cl_flags .. "/D \"_CONSOLE\" /D \"_USRDLL\" /D \"" .. upname .. "\" "
		s = "console"
	elseif _type == "driver" then
		cl_flags = cl_flags .. "/I \"\$(DDKINCDIR)\" /I \"\$(DDKINCDIR)\\ddk\" "
		s = "native"
	elseif _type == "native" then
		s = "native"
	else assert(false,"Unknown target type: " .. _type .. "!")
	end
	
	if opts.NATIVEDLL == "0" then
		cl_flags = cl_flags .. "/MD "
	end

	if _type ~= "driver" then
		f:write("ALL : \"", opts.NAME, ".", target_ext, "\"\n\n")
	else
		f:write("!IF \"\$(NT4_TARGET)\" == \"true\"\n")
		f:write("ALL : \"", opts.NAME, "_nt4.", target_ext, "\"\n")
		f:write("!ELSE\n")
		f:write("ALL : \"", opts.NAME, ".", target_ext, "\"\n")
		f:write("!ENDIF\n\n")
	end

	if _type ~= "driver" then
		f:write(cl_flags, " /c \n")
	else
		f:write("!IF \"\$(NT4_TARGET)\" == \"true\"\n")
		f:write(cl_flags, " /D \"NT4_TARGET\" /c \n")
		f:write("!ELSE\n")
		f:write(cl_flags, " /c \n")
		f:write("!ENDIF\n")
	end

	rsc_flags = "RSC_PROJ=/l 0x409 /d \"NDEBUG\" "
	if _type ~= "driver" then
		f:write(rsc_flags, " \n")
	else
		f:write("!IF \"\$(NT4_TARGET)\" == \"true\"\n")
		f:write(rsc_flags, " /d \"NT4_TARGET\" \n")
		f:write("!ELSE\n")
		f:write(rsc_flags, " \n")
		f:write("!ENDIF\n")
	end
	
	link_flags = "LINK32_FLAGS="
	for i, v in ipairs(libs) do
		if opts.NATIVEDLL ~= "0" or v ~= "msvcrt" then
			link_flags = link_flags .. v .. ".lib "
		end
	end
	for i, v in ipairs(adlibs) do
		link_flags = link_flags .. v .. ".lib "
	end
	if opts.NATIVEDLL == "0" then
		-- DLL for console/gui environment
		link_flags = link_flags .. "/nologo /incremental:no /machine:I386 "
	else
		link_flags = link_flags .. "/nologo /incremental:no /machine:I386 /nodefaultlib "
	end
	link_flags = link_flags .. "/subsystem:" .. s .. " "
	if _type == "dll" then
		if opts.NATIVEDLL == "0" then
			link_flags = link_flags .. "/dll "
		else
			link_flags = link_flags .. "/entry:\"DllMain\" /dll "
		end
		link_flags = link_flags .. "/def:" .. opts.DEFFILE .. " "
		link_flags = link_flags .. "/implib:" .. opts.NAME .. ".lib "
	elseif _type == "native" then
		link_flags = link_flags .. "/entry:\"NtProcessStartup\" "
	elseif _type == "driver" then
		link_flags = link_flags .. "/base:\"0x10000\" /entry:\"DriverEntry\" "
		link_flags = link_flags .. "/driver /align:32 "
	end
	if _type ~= "driver" then
		f:write(link_flags, " /out:\"", opts.NAME, ".", target_ext, "\" \n\n")
	else
		f:write("!IF \"\$(NT4_TARGET)\" == \"true\"\n")
		f:write(link_flags, " /out:\"", opts.NAME, "_nt4.", target_ext, "\" \n")
		f:write("!ELSE\n")
		f:write(link_flags, " /out:\"", opts.NAME, ".", target_ext, "\" \n")
		f:write("!ENDIF\n\n")
	end
	
	f:write("CPP=cl.exe\nRSC=rc.exe\nLINK32=link.exe\n\n")
	f:write(".c.obj::\n")
	f:write("    \$(CPP) \@<<\n")
	f:write("    \$(CPP_PROJ) \$<\n")
	f:write("<<\n\n")

	f:write("LINK32_OBJS=")
	for i, v in ipairs(src_files) do
		f:write(string.gsub(v,"%.c","%.obj"), " ")
	end
	for i, v in ipairs(rc_files) do
		f:write(string.gsub(v,"%.rc","%.res"), " ")
	end
	f:write("\n\n")
	
	if _type ~= "driver" then
		if _type == "dll" then
			f:write("DEF_FILE=", opts.DEFFILE, "\n\n")
			f:write("\"", opts.NAME, ".", target_ext, "\" : \$(DEF_FILE) \$(LINK32_OBJS)\n")
			f:write("    \$(LINK32) \@<<\n")
			f:write("  \$(LINK32_FLAGS) \$(LINK32_OBJS)\n")
			f:write("<<\n\n")
		else
			f:write("\"", opts.NAME, ".", target_ext, "\" : \$(LINK32_OBJS)\n")
			f:write("    \$(LINK32) \@<<\n")
			f:write("  \$(LINK32_FLAGS) \$(LINK32_OBJS)\n")
			f:write("<<\n\n")
		end
	else
		f:write("!IF \"\$(NT4_TARGET)\" == \"true\"\n")
		f:write("\"", opts.NAME, "_nt4.", target_ext, "\" : \$(LINK32_OBJS)\n")
		f:write("    \$(LINK32) \@<<\n")
		f:write("  \$(LINK32_FLAGS) \$(LINK32_OBJS)\n")
		f:write("<<\n\n")
		f:write("!ELSE\n")
		f:write("\"", opts.NAME, ".", target_ext, "\" : \$(LINK32_OBJS)\n")
		f:write("    \$(LINK32) \@<<\n")
		f:write("  \$(LINK32_FLAGS) \$(LINK32_OBJS)\n")
		f:write("<<\n\n")
		f:write("!ENDIF\n\n")
	end

	for i, v in ipairs(rc_files) do
		f:write("SOURCE=", v, "\n\n")
		f:write(string.gsub(v,"%.rc","%.res"), " : \$(SOURCE)\n")
		f:write("    \$(RSC) \$(RSC_PROJ) \$(SOURCE)\n\n")
	end

	f:close()
end

-- MinGW backend
function produce_mingw_makefile()
	local _type
	local adlibs_libs = {}
	local adlibs_paths = {}
	local pos, j

	local f = assert(io.open(".\\Makefile.mingw","w"))

	f:write("PROJECT = ", opts.NAME, "\nCC = gcc.exe\n\n")
	f:write("WINDRES = \"\$(COMPILER_BIN)windres.exe\"\n\n")
	
	_type = opts.TYPE
	if _type == "driver" then
		f:write("ifeq (\$(NT4_TARGET),true)\n")
		f:write("TARGET = ", nt4target_name, "\n")
		f:write("else\n")
		f:write("TARGET = ", target_name, "\n")
		f:write("endif\n")
	else
		f:write("TARGET = ", target_name, "\n")
	end
	
	if _type == "driver" then
		f:write("ifeq (\$(NT4_TARGET),true)\n")
		f:write("CFLAGS = -pipe  -Wall -g0 -O2 -DNT4_TARGET \n")
		f:write("else\n")
		f:write("CFLAGS = -pipe  -Wall -g0 -O2 \n")
		f:write("endif\n")
	else
		f:write("CFLAGS = -pipe  -Wall -g0 -O2\n")
	end
	
	if _type == "driver" then
		f:write("ifeq (\$(NT4_TARGET),true)\n")
		f:write("RCFLAGS = -DNT4_TARGET \n")
		f:write("else\n")
		f:write("RCFLAGS = \n")
		f:write("endif\n")
	else
		f:write("RCFLAGS = \n")
	end
	
	f:write("C_INCLUDE_DIRS = \n")
	f:write("C_PREPROC = \n")
	f:write("RC_INCLUDE_DIRS = \n")
	f:write("RC_PREPROC = \n")
	
	if _type == "console" then
		f:write("LDFLAGS = -pipe -Wl,--strip-all\n")
	elseif _type == "gui" then
		f:write("LDFLAGS = -pipe -mwindows -Wl,--strip-all\n")
	elseif _type == "native" then
		f:write("LDFLAGS = -pipe -nostartfiles -nodefaultlibs ")
		f:write("-Wl,--entry,_NtProcessStartup\@4,--subsystem,native,--strip-all\n")
	elseif _type == "driver" then
		f:write("LDFLAGS = -pipe -nostartfiles -nodefaultlibs ")
		f:write(opts.NAME .. "-mingw.def -Wl,--entry,_DriverEntry\@8,")
		f:write("--subsystem,native,--image-base,0x10000,-shared,--strip-all\n")
	elseif _type == "dll" then
		f:write("LDFLAGS = -pipe -shared -Wl,")
		f:write("--out-implib,lib", opts.NAME, ".dll.a -nostartfiles ")
		f:write("-nodefaultlibs ", opts.NAME, "-mingw.def -Wl,--kill-at,")
		f:write("--entry,_DllMain\@12,--strip-all\n")
	else assert(false,"Unknown target type: " .. _type .. "!")
	end

	f:write("LIBS = ")
	for i, v in ipairs(libs) do
		f:write("-l", v, " ")
	end

	j = 1
	for i, v in ipairs(adlibs) do
		pos = 0
		repeat
			pos = string.find(v,"\\",pos + 1,true)
			--FIXME: pos == nil ??? it's unusual, but ...
		until string.find(v,"\\",pos + 1,true) == nil
		adlibs_libs[j] = string.sub(v,pos + 1)
		adlibs_paths[j] = string.sub(v,0,pos - 1)
		j = j + 1
	end
	for i, v in ipairs(adlibs_libs) do
		f:write("-l", v, " ")
	end
	f:write("\nLIB_DIRS = ")
	for i, v in ipairs(adlibs_paths) do
		f:write("-L\"", v, "\" ")
	end
	f:write("\n\n")
	
	f:write("SRC_OBJS = ")
	for i, v in ipairs(src_files) do
		f:write(string.gsub(v,"%.c","%.o"), " ")
	end

	f:write("\n\nRSRC_OBJS = ")
	for i, v in ipairs(rc_files) do
		f:write(string.gsub(v,"%.rc","%.res"), " ")
	end
	f:write("\n\n")
	
	f:write("define build_target\n")
	f:write("\@echo Linking...\n")
	f:write("\@\$(CC) -o \$(TARGET) ")
	f:write("\$(SRC_OBJS) \$(RSRC_OBJS) \$(LIB_DIRS) \$(LIBS) \$(LDFLAGS)\n")
	f:write("endef\n\n")
	f:write("define compile_resource\n")
	f:write("\@echo Compiling \$<\n")
	f:write("\@\$(WINDRES) \$(RCFLAGS) \$(RC_PREPROC) \$(RC_INCLUDE_DIRS) ")
	f:write("-O COFF -i \"\$<\" -o \"\$\@\"\n")
	f:write("endef\n\n")
	f:write("define compile_source\n")
	f:write("\@echo Compiling \$<\n")
	f:write("\@\$(CC) \$(CFLAGS) \$(C_PREPROC) \$(C_INCLUDE_DIRS) ")
	f:write("-c \"\$<\" -o \"\$\@\"\n")
	f:write("endef\n\n")
	
	f:write(".PHONY: print_header\n\n")
	f:write("\$(TARGET): print_header \$(RSRC_OBJS) \$(SRC_OBJS)\n")
	f:write("\t\$(build_target)\n")

	if _type == "dll" then
		f:write("\t\$(correct_lib)\n")
	end
	
	f:write("\nprint_header:\n")
	f:write("\t\@echo ----------Configuration: ", opts.NAME, " - Release----------\n\n")
	
	if _type == "dll" then
		f:write("define correct_lib\n")
		f:write("\t\@echo ------ correct the lib\$(PROJECT).dll.a library ------\n")
		f:write("\t\@dlltool -k --output-lib lib\$(PROJECT).dll.a --def ")
		f:write(opts.NAME, "-mingw.def\n")
		f:write("endef\n\n")
	end
	
	for i, v in ipairs(src_files) do
		f:write(string.gsub(v,"%.c","%.o"), ": ")
		f:write(v, "\n\t\$(compile_source)\n\n")
	end

	for i, v in ipairs(rc_files) do
		f:write(string.gsub(v,"%.rc","%.res"), ": ")
		f:write(v, "\n\t\$(compile_resource)\n\n")
	end

	f:close()
end

-- frontend
input_filename = arg[1]
if input_filename == nil then
	assert(false,"Filename must be specified!")
end
print(input_filename .. " Preparing to makefile generation...\n")

get_opts(input_filename)
target_type = opts.TYPE
if target_type == "console" or target_type == "gui" or target_type == "native" then
	target_ext = "exe"
elseif target_type == "dll" then
	target_ext = "dll"
elseif target_type == "driver" then
	target_ext = "sys"
else
	assert(false, "Unknown target type: " .. target_type .. "!")
end
target_name = opts.NAME .. "." .. target_ext
nt4target_name = opts.NAME .. "_nt4." .. target_ext

if os.getenv("BUILD_ENV") == "winddk" then
	if obsolete(input_filename,".\\sources") then
		produce_ddk_makefile()
	end
	print(input_filename .. " winddk build performing...\n")
	arch = "i386"
	if os.getenv("AMD64") ~= nil then arch = "amd64" end
	if os.getenv("IA64") ~= nil then arch = "ia64" end
	ddk_cmd = ddk_cmd .. " -c"
	if target_type == "dll" then
		if os.execute(ddk_cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		if arch == "i386" then
			copy("objfre_wnet_x86\\i386\\" .. target_name,"..\\..\\bin\\")
			copy("objfre_wnet_x86\\i386\\" .. opts.NAME .. ".lib","..\\..\\lib\\")
		else
			copy("objfre_wnet_" .. arch .. "\\" .. arch .. "\\" .. target_name,
				"..\\..\\bin\\" .. arch .. "\\")
			copy("objfre_wnet_" .. arch .. "\\" .. arch .. "\\" .. opts.NAME .. ".lib",
				 "..\\..\\lib\\" .. arch .. "\\" .. opts.NAME .. ".lib")
		end
	elseif target_type == "driver" then
		--ddk_cmd = ddk_cmd .. " -c"
		local script = assert(io.open(".\\builddrv.cmd","w"))
		local cmd = "cmd.exe /C builddrv.cmd"
		script:write("\@echo off\nset NT4_TARGET=true\n", ddk_cmd, "\n")
		script:close()
		if arch == "i386" then
			if os.execute(cmd) ~= 0 then
				assert(false,"Can't build the target!")
			end
			copy("objfre_wnet_x86\\i386\\" .. nt4target_name,"..\\..\\bin\\")
		end
		script = assert(io.open(".\\builddrv.cmd","w"))
		script:write("\@echo off\nset NT4_TARGET=false\n", ddk_cmd, "\n")
		script:close()
		if os.execute(cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		if arch == "i386" then
			copy("objfre_wnet_x86\\i386\\" .. target_name,"..\\..\\bin\\")
		else
			copy("objfre_wnet_" .. arch .. "\\" .. arch .. "\\" .. target_name,
				"..\\..\\bin\\" .. arch .. "\\")
		end
	else
		if os.execute(ddk_cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		if arch == "i386" then
			copy("objfre_wnet_x86\\i386\\" .. target_name,"..\\..\\bin\\")
		else
			copy("objfre_wnet_" .. arch .. "\\" .. arch .. "\\" .. target_name,
				"..\\..\\bin\\" .. arch .. "\\")
		end
	end
elseif os.getenv("BUILD_ENV") == "msvc" then
	if obsolete(input_filename, opts.NAME .. ".mak") then
		produce_msvc_makefile()
	end
	print(input_filename .. " msvc build performing...\n")
	msvc_cmd = msvc_cmd .. opts.NAME .. ".mak"
	if target_type == "dll" then
		if os.execute(msvc_cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(target_name,"..\\..\\bin\\")
		copy(opts.NAME .. ".lib","..\\..\\lib\\")
	elseif target_type == "driver" then
		local script = assert(io.open(".\\builddrv.cmd","w"))
		local cmd = "cmd.exe /C builddrv.cmd"
		script:write("\@echo off\nset NT4_TARGET=true\n", msvc_cmd, "\n")
		script:close()
		if os.execute(cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(nt4target_name,"..\\..\\bin\\")
		script = assert(io.open(".\\builddrv.cmd","w"))
		script:write("\@echo off\nset NT4_TARGET=false\n", msvc_cmd, "\n")
		script:close()
		if os.execute(cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(target_name,"..\\..\\bin\\")
	else
		if os.execute(msvc_cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(target_name,"..\\..\\bin\\")
	end
elseif os.getenv("BUILD_ENV") == "mingw" then
	if obsolete(input_filename, ".\\Makefile.mingw") then
		produce_mingw_makefile()
	end
	print(input_filename .. " mingw build performing...\n")
	if target_type == "dll" then
		if os.execute(mingw_cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(target_name,"..\\..\\bin\\")
		copy("lib" .. target_name .. ".a","..\\..\\lib\\")
	elseif target_type == "driver" then
		local script = assert(io.open(".\\builddrv.cmd","w"))
		local cmd = "cmd.exe /C builddrv.cmd"
		script:write("\@echo off\nset NT4_TARGET=true\n", mingw_cmd, "\n")
		script:close()
		if os.execute(cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(nt4target_name,"..\\..\\bin\\")
		script = assert(io.open(".\\builddrv.cmd","w"))
		script:write("\@echo off\nset NT4_TARGET=false\n", mingw_cmd, "\n")
		script:close()
		if os.execute(cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(target_name,"..\\..\\bin\\")
	else
		if os.execute(mingw_cmd) ~= 0 then
			assert(false,"Can't build the target!")
		end
		copy(target_name,"..\\..\\bin\\")
	end
else assert(false,"\%BUILD_ENV\% has wrong value: " .. os.getenv("BUILD_ENV") .. "!")
end

print(input_filename .. " " .. os.getenv("BUILD_ENV") .. " build was successful.\n")
